install django-crispy-forms
install crispy-bootstrap5
django-admin startproject projectname
cd projectname > python manage.py startapp appname

add the main.apps.MainConfig file to installed apps in settings.py in main project folder

add to installed apps "crispy_forms" and "crispy_bootstrap5"

add 
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRIPSY_TEMPLATE_PACK = "bootstrap5"
LOGIN_REDIRECT_URL  = "/home"
LOGOUT_REDIRECT_URL = "/login"

create urls.py file in the app that you create:
 include:
    from django.urls import path
    from .views import views

        urlpatters = [
            path('', views.name_of_route, name = "name_of_route")
        ]

on the views:
 we need to create a home route
 def home(request):
    return render(request, 'main/home.html') # render the template here its at main/home.html

we also need to create a login:
    here we used the django.contrib.auth.urls in the urls.py in main app folder
    create a login.html template
        in the login.html 
            {% load crispy_forms_tags%}
        in the block content add form tags 
            {% block content %}
                <form>
                    {% csrf_token %}{{ form|crispy }}
                    <p>Add any other extra infor here</p>
                    <button>Login</button>
                </form>
            {% endblock %}


we also need to have a sign up page that makes use of the model already in django
    we also need to create a template for the sign_up page uses the login style
    create a new file call it forms that should have the forms
        from django.contrib.auth.models import User
        FROM django.contrib.auth.forms import UserCreationForm
        from django import forms

        class RegisterForm(UserCreationForm):
            email = forms.EmailField(required = True)

            classMeta:
                model = User
                fields = ["username","email","password1","password2"]


we need to have this form in the views:
 from .forms import RegisterForm
 from django.shortcuts import render, redirect
 from django.contrib.auth import login, logout, authenticate


    def sign_up(request):
        if request.method == "POST":
            #getting 
            form = RegisterForm(request.POST)
            if form.is_valid():
                user = form.save()
                login(request, user)
                return redirect("/home)
        else:
            form = RegisterForm()

        return render(request, 'registration/sign_up.html', {"form": form})

we need to run migration to create the databases  before using login and sign up
 otherwise we gate the error auth_user model doesn't exist
    >> python manage.py migrate


we can add decorators to prevent access to certain urls unless user is logged in:
    from django.contrib.auth.decorators import login_required
 add this as a decorator to the url you want to have login required
    @login_required(login_url = "/login")

creating models for custom catabases to handle our customized requirements
    from django.contrib.auth.models import User
 We need to associate a post with a user that's why we need that User model by Django
    from django.db import models

 creating model classes
  The model class inherits from the models.Model;
    class modelName(models.Model):
        //create an auther and associate that with the User model
        //make it ondelete=CASCADE to make sure that when author is deleted >> posts go as well
        auther = models.Foreign(User, ondelete=models.CASCADE)

adding to DateField types in models. Auto assigned the current date time 
    auto_now_add=True
    auto_now=True

When applying changes to the models
    >> python manage.py makemigrations
    >> python manage.py migrate

we need to create a from that allows us to accept the data input for the post content
When we create a model that stores data input by the user

// create a model
    from django.db import models
    from django.contrib.auth.models import User

    class Post(models.Model):
        author = models.ForeignKey(User, on_delete=models.CASCADE)
        title = models.CharField(max_length=200)
        description = models.TextFieled()

// in the forms.py lets create a form that allows user to input this data

    from .models import Post

    class PostForm(forms.ModelForm):
        class Meta:
            model = Post
            fields = ["title","description"]

Now if we want to delete a specific id for a post like to delete
 we need to have name and value in the html
    if request.method == "POST":
        post_id = request.POST.get('post-id')
        #here we get the name given to the html to have the value we assigned
        #check post
        post = Post.objects.get(id=post_id)
        if post and post.author == request.user:
            post.delete

now we need to venture further into authentication by creating groups with special permissions
 First we create a superuser
    >> python manage.py createsuperuser
    >> python manage.py shell
 We would like to automate the process of assigning groups and permissions
    >> From django.contrib.auth.models import Group, Permission, User
    >> from django.contrib.contenttypes.models import ContentType
 Creating groups is done like this: instead of logging in to admin to do it
    >> groupname, created = Group.objects.get_or_create(name="groupname")
 For example creating moderators group
    >> moderators, created = Group.objects.get_or_create(name="moderators")
 Now we create permissions for that group. And we must define to which Model the group have the permissions
    >> from main.models import Post
 We need to get the ContentType of our Post model to be able to add permissions.
    >> ct = ContentType.objects.get_for_model(model=Post)
    >> perm= Permission.objects.filter(content_type = ct)
 now what we need to do is to addd our permissions to the group we created
    >> groupname.permissions.add(*perm) // this add everything
    >> moderators.permissions.add(*perm)
 To add specific permission 
    >> moderators.permissions.add(perm["name of permission"])
 The next challenge is now adding a specific user to the group:
    // First let's get the user
    user = User.objects.filter(username="Scorprog")
    moderators.user_set.add(user.first())

on the routes:
    from django.contrib.auth.decorators import permission_required
    @permission_required("appname.action_modelname", login_url='/login', raise_exception=True)
        in the route we can check for the permission using:
            if post and (post.author == request.user or request.user.has_perm("main.delete_post"))
no we can go to the templates and inlude that permission requirements
    
    {% if user = post.author or perms.main.delete_post %}